#ifndef DataPlayer_h
#define DataPlayer_h

#include "SuperTimer.h"
#define ANIMATION_STOP_CODE 0x00
const uint32_t disp_4digits_animations [] PROGMEM = {
	0x35,  // first byte = length of animation in bytes  (here 53, including the length byte)
// const uint32_t disp_4digits_swoosh [] PROGMEM = {
    0x00,0x00,0x00,0x00, // horizontal right to left sweep.
    0x00,0x00,0x00,0x06,
    0x00,0x00,0x00,0x49,
    0x00,0x00,0x00,0x30,
    0x00,0x00,0x06,0x00,
    0x00,0x00,0x49,0x00,
    0x00,0x00,0x30,0x00,
	0x00,0x06,0x00,0x00,
    0x00,0x49,0x00,0x00,
    0x00,0x30,0x00,0x00,
	0x06,0x00,0x00,0x00,
    0x49,0x00,0x00,0x00,
    0x30,0x00,0x00,0x00, //last byte is byte 52.
	0x19,  //length of next animation (25 including the length)  byte53
	0x00,0x00,0x00,0x00, // vertical swoop     
	0x01,0x01,0x01,0x01,
	0x22,0x22,0x22,0x22,
	0x40,0x40,0x40,0x40,
	0x14,0x14,0x14,0x14,
	0x08,0x08,0x08,0x08,   // byte 77,
	0x81, // ( length of following animation, including the length byte) 
	0xFF,0xFF,0xFF,0xFF, 
	0xDE,0xFF,0xFF,0xFF, 
	0x8E,0xFF,0xFF,0xFF, 
	0x84,0xFF,0xFF,0xFF, 
	0x00,0xFF,0xFF,0xFF, 
	0x00,0xDE,0xFF,0xFF, 
	0x00,0x8E,0xFF,0xFF, 
	0x00,0x84,0xFF,0xFF, 
	0x00,0x00,0xFF,0xFF, 
	0x00,0x00,0xDE,0xFF, 
	0x00,0x00,0x8E,0xFF, 
	0x00,0x00,0x84,0xFF, 
	0x00,0x00,0x00,0xFF, 
	0x00,0x00,0x00,0xDE, 
	0x00,0x00,0x00,0x8E, 
	0x00,0x00,0x00,0x84, 
	0x00,0x00,0x00,0x00,
	
	//0x00,0x00,0x00,0x00,
	0x21,0x00,0x00,0x00, 
	0x71,0x00,0x00,0x00, 
	0x7B,0x00,0x00,0x00, 
	0xFF,0x00,0x00,0x00, 
	0xFF,0x21,0x00,0x00, 
	0xFF,0x71,0x00,0x00, 
	0xFF,0x7B,0x00,0x00, 
	0xFF,0xFF,0x00,0x00, 
	0xFF,0xFF,0x21,0x00, 
	0xFF,0xFF,0x71,0x00, 
	0xFF,0xFF,0x7B,0x00, 
	0xFF,0xFF,0xFF,0x00,
	0xFF,0xFF,0xFF,0x21, 
	0xFF,0xFF,0xFF,0x71, 
	0xFF,0xFF,0xFF,0x7B, 
	// 0xFF,0xFF,0xFF,0xFF,
	
	
	
	ANIMATION_STOP_CODE   //length 0 byte is stop byte.
};	
class DataPlayer{

  public:
    DataPlayer();
    uint16_t getStartIndexByDataSet(uint8_t data_set);
	void loadDataSet(uint8_t data_set);
	
	void setSetIndexDirection(uint8_t dir);
	
	
    uint8_t getActiveByte();
    uint32_t getActive32bit();
    void next(); // next index step IN data set.
	void moveIndexSteps(int8_t steps);
    void update();
    
  private:
	
    uint8_t data_set; // the number of the active data set
	uint8_t data_set_length; // length of the active data set.
	uint8_t data_set_start_index;
	uint8_t index; // index of counter in active data set.
	
	bool set_move_forward_else_backward; // direction of index movement in active set.
    // bool value;
	
	
  
};

#endif


